using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;
using System.Threading.Tasks;
using System.Linq;
using System.Collections.Generic;
using RWT.Spritz;


namespace RWT.Spritz.Tests
{

[TestClass]
public class CryptTests {

	private async Task EncDec(String pw, String origFN, Byte[] content) {
		var encInput = new MemoryStream(content);
		var encOutput = new MemoryStream();
		await Crypto.EncryptAsync(pw, origFN, encInput, encOutput);

		// now test that we can check the password...	
		encOutput.Position = 0;
		var checkFN = await Crypto.CheckAsync(pw, encOutput); 
		Assert.AreEqual(origFN, checkFN, "Checked filename doesn't match!");

		// now see if we can decrypt it...
		var decOutput = new MemoryStream();
		encOutput.Position = 0;
		var decFN = await Crypto.DecryptAsync(pw, encOutput, decOutput);
		Assert.AreEqual(origFN, decFN, "Decrypted filename doesn't match!");


		decOutput.TryGetBuffer(out var decContent);
		Assert.IsTrue(decContent.SequenceEqual(content),"Decrypted content doesn't match!");
	}

	[TestMethod]
	public async Task TestRandomEncDec() {
		var rnd = new Random();

		for(int i = 0; i < 10; ++i) {
			var pw = Convert.ToBase64String(Guid.NewGuid().ToByteArray());

			// make an empty origFN half the time.
			var origFN = ((i & 1) == 0) ? Convert.ToBase64String(Guid.NewGuid().ToByteArray()) : "" ;

			var clen = rnd.Next(16*1024);
			var content = new Byte[clen]; 
			rnd.NextBytes(content);

			await EncDec(pw, origFN, content);
		}

	}

	[TestMethod]
	public async Task TestKnownDatFile() {
		var plainText = new Byte[] {
			0x68,0x65,0x6c,0x6c,0x6f,0x2c,0x20,0x74,0x68,0x65,0x72,0x65,0x0d,0x0a,0x54,0x65,
			0x73,0x74,0x20,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x74,0x65,0x2e,0x0d,0x0a };
		var content = new MemoryStream(new Byte[]{ 
			0xb4,0x1b,0x74,0xe5,0xe9,0x4d,0xb0,0x20,0x98,0x9d,0x25,0x92,0xef,0xac,0x6c,0x50, 
			0x45,0x17,0xb7,0xa7,0xcd,0x92,0x80,0x8e,0x73,0x10,0xfd,0x0b,0x46,0xd1,0x35,0xd0,
			0x68,0x01,0x7b,0xae,0xc3,0xf1,0x35,0x87,0x13,0x24,0x30,0xe3,0x47,0x8f,0xec,0x44,
			0x96,0xa1,0x4d,0xba,0x62,0x53,0xe1,0x80,0x94,0x78,0xeb,0x05,0x41,0xae,0xb8,0xc6,
			0xec,0x54,0xac,0x03,0x1e,0x0d,0x99,0x2a,0x59,0xd9,0x53,0x38,0x43,0x93,0x46,0x17,
			0x04,0xdd,0xc2,0xab,0x26,0x63,0xbb,0x83,0xc3,0xd7,0xa4,0x1e,0x45,0x91,0x11,0xb1,
			0x57,0x73,0x6d,0xfe,0xda,0xae,0xfb,0x5d,0x1d,0xf3,0x5f,0xab,0xb5,0x72,0x1a,0x28,
			0x01 });

		var result = new MemoryStream();
		var origFN = await Crypto.DecryptAsync("ABC123", content, result);

		Assert.AreEqual("hi.txt", origFN);
		result.TryGetBuffer(out var decContent);
		Assert.IsTrue(decContent.SequenceEqual(plainText),"Decrypted content doesn't match!");
	}
} 

} // end namespace

